/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package test_package;

import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import java.io.*;
import java.util.Arrays;
import java.util.Comparator;
import sun.audio.*;

/**
 *
 * @author Arvind
 */
public class view_recording_window extends javax.swing.JFrame {

    
     public static String view_image_path;
    
     public static int i_cnt;
    
     public static int a_cnt;  //count of audio Files
    
     public static int view_image_index;
    
     public static int play_file_index;
    
     BufferedImage d_image;

     ImageIcon icon2;
     
     public static String title_of_Record_viewer;
     
     public static String[] list_of_images;
     
     public static String[] list_of_audioclips;
     
     public static File[] flist_images;
     
     public static File[] flist_audio;
     
   
    /**
     * Creates new form view_recording_window
     */
    public view_recording_window() {
      
       
        initComponents();
      
       
        view_image_index=0;
        play_file_index=0;
        //this.setSize(400,400);
        
    }
    
    public void set_title_of_frame(String s)
    {
     title_of_Record_viewer=s;
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        view_label = new javax.swing.JLabel();
        prev = new javax.swing.JButton();
        next = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle(title_of_Record_viewer);
        setAlwaysOnTop(true);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                show_first_image(evt);
            }
        });

        prev.setText("Previous");
        prev.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                prevActionPerformed(evt);
            }
        });

        next.setText("Next");
        next.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(143, 143, 143)
                .addComponent(prev)
                .addGap(122, 122, 122)
                .addComponent(next, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addComponent(view_label, javax.swing.GroupLayout.PREFERRED_SIZE, 552, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(view_label, javax.swing.GroupLayout.DEFAULT_SIZE, 411, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(prev)
                    .addComponent(next)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void show_first_image(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_show_first_image
        // TODO add your handling code here:
        
     //Play the First Audio Clip---------------------------------------
        play_the_audio_file(list_of_audioclips[play_file_index]);
        
     //Display the first Image----------------------------   
        String path=list_of_images[view_image_index];
        File file1=new File(path);
	//Display The Image in the label	 
                 try 
                 {
                    d_image=ImageIO.read(file1);
                  } catch (Exception exp)
                  { 
                      view_label.setText("Error!!");
                  }
        
  Image thumb = d_image.getScaledInstance(view_label.getWidth(), view_label.getHeight(), Image.SCALE_SMOOTH);
  icon2=new ImageIcon(thumb);    
  
  
  view_label.setIcon(icon2);
        
        
    }//GEN-LAST:event_show_first_image

    private void prevActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_prevActionPerformed
        // TODO add your handling code here:
        
        //Handle the Audio Part----------------------------------------------
        
          if(play_file_index>0)
       {
           play_file_index--;  //take the previous audio File
       }    
        
        play_the_audio_file(list_of_audioclips[play_file_index]);
        
     //end of Audio part---------------------------------------------------------
        
       //Handle the Image Display part------------------------------------------
        
         if(view_image_index>0)
       {
           view_image_index--;  //take the previous image
       }    
  
         
         String path=list_of_images[view_image_index];  //new way 
           
         File file=new File(path);
         //Display the Image in the label
          try
          {
            d_image=ImageIO.read(file);
          } catch (IOException ex) 
          {
            view_label.setText("Image is not available");
          }
 
  Image thumb = d_image.getScaledInstance(view_label.getWidth(),view_label.getHeight(), Image.SCALE_SMOOTH);
  icon2=new ImageIcon(thumb);    
  
  view_label.setIcon(icon2);
  
    //end the Image Display Part---------------------------------------------------
             
    }//GEN-LAST:event_prevActionPerformed

    private void nextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextActionPerformed
        // TODO add your handling code here:
    
     //Handle the Audio Part----------------------------------------------   
        
         int next_audio_file_index;
         next_audio_file_index=play_file_index+1;
        
        
         if(next_audio_file_index < a_cnt)
       {
        play_file_index++;  //take the next audio File
       }
         
        play_the_audio_file(list_of_audioclips[play_file_index]);
        
     //end of Audio Part----------------------------------------------------
        
      //Handle the Image Display part---------------------------------------  
        int next_image_index;
        next_image_index=view_image_index+1;
        
       if(next_image_index < i_cnt)
       {
        view_image_index++;  //take the next image
       }
       
 
       
       String path=list_of_images[view_image_index];
       
       File file=new File(path);
        //Display the Image in the label
          try 
          {
            d_image=ImageIO.read(file);
          } catch (IOException ex) 
          {
            view_label.setText("Image is not available");
          }
 
  Image thumb = d_image.getScaledInstance(view_label.getWidth(),view_label.getHeight(), Image.SCALE_SMOOTH);
  icon2=new ImageIcon(thumb);    
  
  view_label.setIcon(icon2);        
   //end of Image Display part-----------------------------------------------  
  
    }//GEN-LAST:event_nextActionPerformed

    /**
     * @param args the command line arguments
     */
    public void show_recording_window(){
        

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new view_recording_window().setVisible(true);
            }
        });
    }
    
     public int check_path_notnull()
    {
       if(view_image_path==null)
        {
       return 0;
        }
        else
        {
        return 1;
        }
    }
     
     public void sort(File[] files)
     {
         
          Arrays.sort(files, new Comparator(){
@Override
public int compare(Object o1, Object o2) {

if (((File)o1).lastModified() < ((File)o2).lastModified()) 
 {
return -1;
 }
else if (((File)o1).lastModified() > ((File)o2).lastModified()) 
 {
return 1;
 } 
 else 
 {
 return 0;
 }
}
}); 
     }
     
     
     
     public void sort_imagefiles_on_time()
     {
         int i;
         
          //System.out.println("Adjusting the flist_images array");  
       
          sort(flist_images);
          
          //System.out.println("Printing the images array after the adjustment");
          i=0;
          for (File file : flist_images)
            {
                    list_of_images[i]=file.getAbsolutePath().toString();
                    //System.out.println(list_of_images[i]);   
                    i++;   
            }
          
     }
     
     public void sort_audiofile_on_time()
     {
          int i;
         
          //System.out.println("Adjusting the flist_audio array");  
          
          sort(flist_audio);
          
          //System.out.println("printing the list of audio clips after adjustment");  
    
          i=0;
          for (File file : flist_audio)
            {
                    list_of_audioclips[i]=file.getAbsolutePath().toString();
                    //System.out.println(list_of_audioclips[i]);   
                    i++;   
            }
    
     }
     
     
     public void count_images()
     {
         //System.out.println("IN COUNT IMAGES");  
         
          int i;
          i_cnt=0;
         
         File directory = new File(view_image_path);
         File[] fList = directory.listFiles();
        
         for (File file : fList)
        {
            if(file.isFile() && file.getName().endsWith("jpg"))
            {
                    i_cnt++;
            }
        }
        
        flist_images=new File[i_cnt];
        list_of_images=new String[i_cnt];
        i=0;
        
         for (File file : fList)
        {
            if(file.isFile() && file.getName().endsWith("jpg"))
            {
                    flist_images[i]=file;
                    i++;
            }
        }
        
     }
     
     public void get_the_audio_files()
     {
         //System.out.println("IN GET AUDIO FILES");  
         
          int i;
      
            a_cnt=0; 
          
       File directory = new File(view_image_path);
       File[] fList = directory.listFiles();
     
        for (File file : fList)
        {
            if(file.isFile() && file.getName().endsWith("wav"))
            {        
                    a_cnt++;
            }
        }
        
        flist_audio=new File[a_cnt];
        list_of_audioclips=new String[a_cnt];
        i=0;
        
         for (File file : fList)
        {
            if(file.isFile() && file.getName().endsWith("wav"))
            {  
                    flist_audio[i]=file;
                    i++;
            }
        }
        
     }
     
     
     public void play_the_audio_file(String s)
     {
         try
         {
         InputStream in =new FileInputStream(s);
         AudioStream au=new AudioStream(in);
         AudioPlayer.player.start(au);
         }
         catch(Exception eau)
         {
             System.out.println("Cannot play the associated audio File");
         }
     }
     
     
     public int verify_info_file()
     {
         String check_path=view_image_path;
         File check=new File(check_path+"\\Task.txt");
         if(check.exists()==true) //Task.txt exists
         {
             return 1;
         }
         else   //Task.txt does not exist
         {
         return 0;
         }
     }
     
 
    public void select_viewimage_path()
    {
        JFileChooser chooser = new JFileChooser();
         chooser.setDialogTitle("Please Select A Task");
         chooser.setCurrentDirectory(new java.io.File("."));
         chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
chooser.setAcceptAllFileFilterUsed(false);

        if (chooser.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) 
        {
          view_image_path=chooser.getSelectedFile().toString();
        } 
        else
        {
         JOptionPane.showMessageDialog(null,"No Directory Chosen");
         view_image_path=null;   
        }
    }
    
      
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton next;
    private javax.swing.JButton prev;
    private javax.swing.JLabel view_label;
    // End of variables declaration//GEN-END:variables
}
