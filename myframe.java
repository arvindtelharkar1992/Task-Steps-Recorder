/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package test_package;

import static java.awt.Frame.ICONIFIED;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.image.BufferedImage;
import java.awt.image.ImageObserver;
import java.awt.image.ImageProducer;
import java.io.File;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import org.jnativehook.GlobalScreen;




/**
 *
 * @author Arvind
 */
public class myframe extends javax.swing.JFrame {

    /**
     * Creates new form myframe
     */
    
    task t;
    
    public static int state;
    
    public static String display_workspace_path;
    public static int display_image_index;
    public static int image_count;
    
    BufferedImage image;
    ImageIcon icon;
    
    public static int listener_flag;
    
    
    
    public myframe() 
    {
        initComponents();
        listener_flag=0;
    }
    
    
    
    public int check_display_workspace()
    {
       if(display_workspace_path==null)
        {
       return 0;
        }
        else
        {
        return 1;
        }
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        start = new javax.swing.JButton();
        view = new javax.swing.JButton();
        stop = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("HUMANUAL");
        setPreferredSize(null);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                Humanual_window_closing(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                Disable_stop_initially(evt);
            }
        });

        start.setIcon(new javax.swing.ImageIcon(getClass().getResource("/proj images/Starticon.png"))); // NOI18N
        start.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startActionPerformed(evt);
            }
        });

        view.setIcon(new javax.swing.ImageIcon(getClass().getResource("/proj images/viewRecording1.png"))); // NOI18N
        view.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewActionPerformed(evt);
            }
        });

        stop.setIcon(new javax.swing.ImageIcon(getClass().getResource("/proj images/stop_button.png"))); // NOI18N
        stop.setDisabledIcon(new javax.swing.ImageIcon(getClass().getResource("/proj images/black_square.png"))); // NOI18N
        stop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addComponent(start, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(58, 58, 58)
                .addComponent(stop, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(67, 67, 67)
                .addComponent(view, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(33, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(view, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(stop, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(start, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void startActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startActionPerformed
        // TODO add your handling code here:
     
        
        state=1; //state transition from 0 to 1.indicates that new recording has started
        
        t=new task();
         t.get_task_name();
         t.select_workspace();
         
         if(t.check()==1)  //if Directory has been chosen...proceeed.
         {
             t.create_workspace();
             t.create_original_images_folder();
              t.generate_the_thumbnail_file();
              
        t.initialise_the_listener();
        listener_flag=1; //this indicates that the listener has been initialised and is active
        t.start_the_recording();
        
        start.setEnabled(false); //disable the start button until the recording ends
        stop.setEnabled(true);  //enable the stop button
        
        this.setState(ICONIFIED);
         }
    }//GEN-LAST:event_startActionPerformed

    private void viewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewActionPerformed
        // TODO add your handling code here:
             
        String title_of_viewer;
   view_recording_window v=new view_recording_window();
             v.select_viewimage_path();
             if(v.check_path_notnull()==1) //check if path is not null
             {
                 //------------------------------------------------------------
                 if(v.verify_info_file()==1) //if info file exists then
                 {
                  create_read_only x=new  create_read_only(); 
                  title_of_viewer=x.now_read_the_info_file(v.view_image_path);
                  v.set_title_of_frame(title_of_viewer);
                  
                 //------------------------------------------------------------- 
                 this.setState(ICONIFIED);
                 v.count_images();
                 v.get_the_audio_files();
                 v.sort_imagefiles_on_time();
                 v.sort_audiofile_on_time();
                 v.show_recording_window();            
                 }
                 else  //display error message that recording cannot be performed
                 {
                     JOptionPane.showMessageDialog(null,"Either this recording is not valid,or it did not end propoerly!");
                 }
             }
    }//GEN-LAST:event_viewActionPerformed

    private void stopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopActionPerformed
        // TODO add your handling code here:
        state=0; //state transition from 1 to 2 indicates that recording has ended
        
        String Task_workspace;
        String Task_name;
        
         t.remove_listener();
         listener_flag=0; //This indicates that the listener has been removed
         t.generate_the_pdf();
         
         //-----------Doc File Generation
         try
         {
         t.generate_the_doc();
         }
         catch(Exception doc_exp)
         {
        JOptionPane.showMessageDialog(null,"Could not generate the Doc file");    
         }
         
         //---------------------------------------
         
         t.generate_the_info_file();
         
          //once all the steps of the ongoing recording have been completed
         //,enable the start button
         start.setEnabled(true);  //again enable the start button for new recording 
           stop.setEnabled(false);  //disable the stop button
           
           String opath=t.get_original_image_folder();
           
          File folder=new File(opath);
        folder.delete();
        
      //Get The Workspace Path and The Task name for future use
        Task_workspace=t.return_workspace_name();
        Task_name=t.return_task_name();
        
        //Delete The Thumbnail file...Thumbnails.txt--------------------------------
        File thumbnail_file=new File(Task_workspace+"\\"+Task_name+"\\Thumbnails.txt");
        
        boolean del_thumbnail;
        del_thumbnail=thumbnail_file.delete();
        
        //---------Thumbnails.txt deleted--------------------------------------------
        
        //System.out.println(Task_workspace);
        //System.out.println( Task_name);
        
        //Create the zip Folder
        
        create_zip_folder z= new create_zip_folder(Task_workspace+"\\"+Task_name,Task_name+".zip");
        try {
            z.create_zip_file();
        } catch (IOException ex) {
            Logger.getLogger(myframe.class.getName()).log(Level.SEVERE, null, ex);
        }
       
        
        
           
    }//GEN-LAST:event_stopActionPerformed

    private void Disable_stop_initially(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_Disable_stop_initially
        // TODO add your handling code here:
        stop.setEnabled(false);
    }//GEN-LAST:event_Disable_stop_initially

    private void Humanual_window_closing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_Humanual_window_closing
        // TODO add your handling code here:
        if(listener_flag==1)  //listener has not been removed due improper termination of recording
        {
            t.remove_listener();
            JOptionPane.showMessageDialog(null,"Listener was not removed...now it is removed");
        }
        
        
    }//GEN-LAST:event_Humanual_window_closing

    /**
     * @param args the command line arguments
    */
    public static void main(String args[]){
        
            /* Set the Nimbus look and feel */
            //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
            /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
             * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
             */
            try {
                for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                    if ("Nimbus".equals(info.getName())) {
                        javax.swing.UIManager.setLookAndFeel(info.getClassName());
                        break;
                    }
                }
            } catch (ClassNotFoundException ex) {
                java.util.logging.Logger.getLogger(myframe.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
            } catch (InstantiationException ex) {
                java.util.logging.Logger.getLogger(myframe.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
            } catch (IllegalAccessException ex) {
                java.util.logging.Logger.getLogger(myframe.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
            } catch (javax.swing.UnsupportedLookAndFeelException ex) {
                java.util.logging.Logger.getLogger(myframe.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
            }
            //</editor-fold>
            
            try{
                /*
                 UIManager.setLookAndFeel("com.jtattoo.plaf.hifi.HiFiLookAndFeel");
                 UIManager.setLookAndFeel("com.jtattoo.plaf.hifi.HiFiButtonUI");
                 UIManager.setLookAndFeel("com.jtattoo.plaf.hifi.HiFiLabelUI");
                 UIManager.setLookAndFeel("com.jtattoo.plaf.hifi.HiFiPanelUI"); 
                 UIManager.setLookAndFeel("com.jtattoo.plaf.hifi.HiFiScrollBarUI"); 
                 UIManager.setLookAndFeel("com.jtattoo.plaf.hifi.HiFiTitlePane");
                 UIManager.setLookAndFeel("com.jtattoo.plaf.hifi.HiFiToggleButtonUI");
                 UIManager.setLookAndFeel("com.jtattoo.plaf.hifi.HiFiUtils");
                */
                UIManager.setLookAndFeel("com.jtattoo.plaf.noire.NoireLookAndFeel");
                 //UIManager.setLookAndFeel("com.jtattoo.plaf.hifi.NoireButtonUI");
                
                
                
              
            }catch(Exception exp){System.out.println("");}
            
              /* Create and display the form */
            java.awt.EventQueue.invokeLater(new Runnable() {
                public void run() {
                    new myframe().setVisible(true);         
                }
            });
        
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton start;
    private javax.swing.JButton stop;
    private javax.swing.JButton view;
    // End of variables declaration//GEN-END:variables
}
